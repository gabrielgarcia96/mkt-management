@using Marketing.App.Security
﻿﻿﻿@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.Json

@inherits LayoutComponentBase

@inject AuthService authService
@inject ProtectedLocalStorage localStorage

<RadzenComponents @rendermode="InteractiveServer" />

<RadzenLayout style="position: relative;grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="Header" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" @bind-Expanded="@sidebarExpanded" style="position: absolute; z-index: 3">
        <RadzenStack AlignItems="AlignItems.End" class="rz-p-2">
            <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="@(() => sidebarExpanded = false)" />
        </RadzenStack>
        <RadzenPanelMenu>
            @if (authService.IsLoggedIn)
            {
            @if (authService.IsAdmin)
            {
                <RadzenPanelMenuItem Text="Companies" Icon="apartment" Path="companies" />
                <RadzenPanelMenuItem Text="Dashboard" Icon="dashboard" Path="dashboard" />
                <RadzenPanelMenuItem Text="Campaign" Icon="campaign" Path="campaigns" />
            }
            }
            else
            {
                <RadzenPanelMenuItem Text="Login" Icon="login" Path="/" />
            }
        </RadzenPanelMenu>
        <div class="rz-p-4">
            Sidebar
        </div>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    @if (sidebarExpanded)
    {
        <div @onclick="@(() => sidebarExpanded = false)" class="rz-dialog-mask" style="position: absolute; z-index: 2"></div>
    }
</RadzenLayout>

@code {
    bool sidebarExpanded = true;


    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         var result = await localStorage.GetAsync<string>("auth_token");
    //         authService.SetLoggedIn(result.Success && !string.IsNullOrEmpty(result.Value));
    //         authService.OnChange += async () => await InvokeAsync(StateHasChanged);
    //     }


    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await localStorage.GetAsync<string>("auth_user");
            if (result.Success && !string.IsNullOrEmpty(result.Value))
            {
                var userData = JsonSerializer.Deserialize<LoginDto>(result.Value, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                authService.SetLoggedIn(true, userData);
            }
            else
            {
                authService.SetLoggedIn(false);
            }

            authService.OnChange += async () => await InvokeAsync(StateHasChanged);
        }
    }


    public void Dispose()
    {
        authService.OnChange -= StateHasChanged;
    }
}
