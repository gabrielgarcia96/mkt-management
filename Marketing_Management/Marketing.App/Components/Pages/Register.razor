@page "/register"

@using Marketing.Application.DTOs
@using Marketing.Application.Interfaces
@using Marketing.App.Security

@implements IDisposable
@inject IAccountService AccountService
@inject NavigationManager Navigation
@inject Radzen.NotificationService notification
@inject LanguageService LangService

<RadzenRow Gap="0" class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12"
                    Style="height: 100%;background: #d4af37; color: #ffffff;">
            <RadzenText TextStyle="TextStyle.DisplayH5" TagName="TagName.H2" class="rz-color-white rz-mb-6">@Loc.Get("WelcomeTitle", currentLanguage)</RadzenText>
            <RadzenText TextStyle="TextStyle.DisplayH3" class="rz-color-white">@Loc.Get("MarketingLabel", currentLanguage)</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-white">@Loc.Get("ManageText", currentLanguage)</RadzenText>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" class="rz-mb-6">
                @Loc.Get("RegisterTitle", currentLanguage)
            </RadzenText>
            <EditForm Model="registerDto" FormName="RegisterForm" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">
                        @Loc.Get("UsernameLabel", currentLanguage)
                        </RadzenText>
                    <RadzenTextBox @bind-Value="registerDto.Username" Style="width: 100%" aria-label="Default TextBox" />
                </div>

                <div>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
                    <RadzenTextBox @bind-Value="registerDto.Email" Style="width: 100%" aria-label="Default TextBox" />
                </div>

                <div>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@Loc.Get("PasswordLabel", currentLanguage)</RadzenText>
                    <RadzenPassword @bind-Value="registerDto.Password" Style="width: 100%" AutoComplete="false" aria-label="enter password" />
                </div>
                <div>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@Loc.Get("ConfirmPassLabel", currentLanguage)</RadzenText>
                    <RadzenPassword @bind-Value="registerDto.ConfirmPassword" Style="width: 100%" AutoComplete="false" aria-label="enter password" />
                </div>

                <div style="margin-top: 30px">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="@Loc.Get("RegisterButton", currentLanguage)" Style="background: #d4af37;" />
                </div>
            </EditForm>
            <div class="rz-p-12 rz-text-align-center">
                <RadzenLink @onclick="NavigatePage" Text="@Loc.Get("LoginLink", currentLanguage)" />
            </div>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>


@code {
    [SupplyParameterFromForm]
    private RegisterDto registerDto { get; set; } = new();
    private string currentLanguage => LangService.CurrentLanguage;
    private List<LanguageItem> languages => new()
{
    new LanguageItem { Text = Loc.Get("Portuguese", currentLanguage), Value = "pt" },
    new LanguageItem { Text = Loc.Get("English", currentLanguage), Value = "en" }
};


    protected override void OnInitialized()
    {
        LangService.OnLanguageChanged += LanguageChanged;
        registerDto ??= new();
    }

    private void LanguageChanged()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        LangService.OnLanguageChanged -= LanguageChanged;
    }

    public async Task HandleRegister()
    {
        try
        {
            var existUser = await AccountService.GetUserAsync(registerDto.Username.ToLower());
            var existEmail = await AccountService.GetEmailAsync(registerDto.Email);

            if (existUser != null)
            {
                notification.Notify(Radzen.NotificationSeverity.Error, "Erro", "Username already exists!");
                return;
            }

            if (existEmail != null)
            {
                notification.Notify(Radzen.NotificationSeverity.Error, "Erro", "E-mail already exists!");
                return;
            }

            await AccountService.RegisterAsync(registerDto);
            registerDto = new();
            Navigation.NavigateTo("/");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error Register: " + ex);
        }
    }


    public void NavigatePage()
    {
        Navigation.NavigateTo("/");
    }
}